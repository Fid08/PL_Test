//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Touchscreen"",
            ""id"": ""17a7ddf3-8e60-4a58-9484-cc9a5ad15a1c"",
            ""actions"": [
                {
                    ""name"": ""TapOnScreen"",
                    ""type"": ""Button"",
                    ""id"": ""0723a535-b52d-411a-9b92-c4731b82f80e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""0ff4d9f2-11e3-4918-9adf-1c141d6bfbac"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPosition"",
                    ""type"": ""Value"",
                    ""id"": ""c9c8fbf0-77ba-4250-8f40-e7f28f557dd5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScreenLocator"",
                    ""type"": ""Value"",
                    ""id"": ""4e85013f-abec-4b58-991e-c67193ace273"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FingerPos"",
                    ""type"": ""Value"",
                    ""id"": ""b7be1f37-606d-48c7-ab3a-6a0783480cf0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""545da9a9-fa3b-44eb-89a5-e2aafb281934"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapOnScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88634f51-f329-4554-aac3-c95a14369016"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbbc1265-2a16-4953-a4e7-27958d518b0a"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a27d453b-f947-4103-b9e9-d5581bbeab2c"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenLocator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2528bf5-720d-4095-8752-9c95856af547"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FingerPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touchscreen
        m_Touchscreen = asset.FindActionMap("Touchscreen", throwIfNotFound: true);
        m_Touchscreen_TapOnScreen = m_Touchscreen.FindAction("TapOnScreen", throwIfNotFound: true);
        m_Touchscreen_TouchPress = m_Touchscreen.FindAction("TouchPress", throwIfNotFound: true);
        m_Touchscreen_TapPosition = m_Touchscreen.FindAction("TapPosition", throwIfNotFound: true);
        m_Touchscreen_ScreenLocator = m_Touchscreen.FindAction("ScreenLocator", throwIfNotFound: true);
        m_Touchscreen_FingerPos = m_Touchscreen.FindAction("FingerPos", throwIfNotFound: true);
    }

    ~@GameInput()
    {
        UnityEngine.Debug.Assert(!m_Touchscreen.enabled, "This will cause a leak and performance issues, GameInput.Touchscreen.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touchscreen
    private readonly InputActionMap m_Touchscreen;
    private List<ITouchscreenActions> m_TouchscreenActionsCallbackInterfaces = new List<ITouchscreenActions>();
    private readonly InputAction m_Touchscreen_TapOnScreen;
    private readonly InputAction m_Touchscreen_TouchPress;
    private readonly InputAction m_Touchscreen_TapPosition;
    private readonly InputAction m_Touchscreen_ScreenLocator;
    private readonly InputAction m_Touchscreen_FingerPos;
    public struct TouchscreenActions
    {
        private @GameInput m_Wrapper;
        public TouchscreenActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapOnScreen => m_Wrapper.m_Touchscreen_TapOnScreen;
        public InputAction @TouchPress => m_Wrapper.m_Touchscreen_TouchPress;
        public InputAction @TapPosition => m_Wrapper.m_Touchscreen_TapPosition;
        public InputAction @ScreenLocator => m_Wrapper.m_Touchscreen_ScreenLocator;
        public InputAction @FingerPos => m_Wrapper.m_Touchscreen_FingerPos;
        public InputActionMap Get() { return m_Wrapper.m_Touchscreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchscreenActions set) { return set.Get(); }
        public void AddCallbacks(ITouchscreenActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Add(instance);
            @TapOnScreen.started += instance.OnTapOnScreen;
            @TapOnScreen.performed += instance.OnTapOnScreen;
            @TapOnScreen.canceled += instance.OnTapOnScreen;
            @TouchPress.started += instance.OnTouchPress;
            @TouchPress.performed += instance.OnTouchPress;
            @TouchPress.canceled += instance.OnTouchPress;
            @TapPosition.started += instance.OnTapPosition;
            @TapPosition.performed += instance.OnTapPosition;
            @TapPosition.canceled += instance.OnTapPosition;
            @ScreenLocator.started += instance.OnScreenLocator;
            @ScreenLocator.performed += instance.OnScreenLocator;
            @ScreenLocator.canceled += instance.OnScreenLocator;
            @FingerPos.started += instance.OnFingerPos;
            @FingerPos.performed += instance.OnFingerPos;
            @FingerPos.canceled += instance.OnFingerPos;
        }

        private void UnregisterCallbacks(ITouchscreenActions instance)
        {
            @TapOnScreen.started -= instance.OnTapOnScreen;
            @TapOnScreen.performed -= instance.OnTapOnScreen;
            @TapOnScreen.canceled -= instance.OnTapOnScreen;
            @TouchPress.started -= instance.OnTouchPress;
            @TouchPress.performed -= instance.OnTouchPress;
            @TouchPress.canceled -= instance.OnTouchPress;
            @TapPosition.started -= instance.OnTapPosition;
            @TapPosition.performed -= instance.OnTapPosition;
            @TapPosition.canceled -= instance.OnTapPosition;
            @ScreenLocator.started -= instance.OnScreenLocator;
            @ScreenLocator.performed -= instance.OnScreenLocator;
            @ScreenLocator.canceled -= instance.OnScreenLocator;
            @FingerPos.started -= instance.OnFingerPos;
            @FingerPos.performed -= instance.OnFingerPos;
            @FingerPos.canceled -= instance.OnFingerPos;
        }

        public void RemoveCallbacks(ITouchscreenActions instance)
        {
            if (m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchscreenActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchscreenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchscreenActions @Touchscreen => new TouchscreenActions(this);
    public interface ITouchscreenActions
    {
        void OnTapOnScreen(InputAction.CallbackContext context);
        void OnTouchPress(InputAction.CallbackContext context);
        void OnTapPosition(InputAction.CallbackContext context);
        void OnScreenLocator(InputAction.CallbackContext context);
        void OnFingerPos(InputAction.CallbackContext context);
    }
}
